---
- name: Preparing Workstation
  hosts: localhost
  connection: local
  tasks:
    # - name: Update apt packages
    #   become: true
    #   apt:
    #     upgrade: no
    #     update_cache: no
    #     #cache_valid_time: 86400 #One day

    - name: Installing Linux Apps
      become: true
      apt:
        name: '{{ item }}'
        install_recommends: yes
        state: present
      loop:
# asdf         - make
#          - cargo
          - vim
          - tmux       
          - python3-pip
          - python3-pygments
          - zsh          
          - curl
          - wget
          - apt-transport-https
          - ca-certificates
          - gnupg
          - git
          - bash-completion
          - gnupg-agent
          - flameshot
          - fonts-hack
          - tilix
          - virtualbox
          - mlocate
#          - mtr
          - zlib1g-dev
#          - clang
      when: ansible_os_family == "Debian"
    - block:
      - name: Verify if Oh-My-zsh is installed
        command: test -d /home/{{ ansible_user_id }}/.oh-my-zsh
        register: ohmyzsh
        ignore_errors: true
      - name: Installing Oh-My-zsh
        shell:
          cmd: 'curl -fsL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | bash'
          warn: false
        when: ohmyzsh.rc != 0
      - name: Changing Default Shell to ZSH
        become: yes
        user: 
          name: '{{ ansible_user_id }}'
          shell: /bin/zsh 
      - name: Changing Default ZSH Theme to Agnoster
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          regexp: '^ZSH_THEME='
          line: 'ZSH_THEME="agnoster"'
      - name: Creating ZSH Completion folder
        file:
          path: /home/{{ ansible_user_id }}/.oh-my-zsh/completions
          state: directory
          mode: 0755
      - name: Adding autoload to compinit
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          line: 'autoload -U compinit && compinit'
          state: present

    - block:
      - name: Install asdf
        git:
          dest: ~/.asdf
          repo: "https://github.com/asdf-vm/asdf.git"
          accept_hostkey: yes
          update: no
        when: ansible_os_family == "Debian"
      # zsh
      - name: add asdf to zsh
        lineinfile:
          path: ~/.zshrc
          line: . $HOME/.asdf/asdf.sh
        when: ansible_os_family == "Debian"
        
      - name: add asdf-completions to zsh
        lineinfile:
          path: ~/.zshrc
          line: . $HOME/.asdf/completions/asdf.bash
        when: ansible_os_family == "Debian"
      # bashrc
      - name: add asdf to bashrc
        lineinfile:
          path: ~/.bashrc
          line: . $HOME/.asdf/asdf.sh
        when: ansible_os_family == "Debian"

      - name: add asdf-completions to bashrc
        lineinfile:
          path: ~/.bashrc
          line: . $HOME/.asdf/completions/asdf.bash
        when: ansible_os_family == "Debian"

      - name: asdf add latest plugins
        shell: |
          ASDF_DIR=$HOME/.asdf
          . $HOME/.asdf/asdf.sh && \
            asdf plugin add "{{ item }}" && \
            asdf install "{{ item }}" latest && \
            asdf global "{{ item }}" latest
        loop:
          - 1password-cli
          - make
          - argocd
          - argo-rollouts
          - cidrchk
          - yq
          - jq
          - exa
          - k3d
          - k6
          - eksctl
          - golang
          - infracost
          - k9s
          - stern                      
          - kubectl
          - kubectx
          - helm
          - terraform
          - kind
          - maven
          - kafkactl
#          - kcat
#          - python
          - tilt
          - vault
        when: ansible_os_family == "Debian"
    - block:
      - name: configure tmux
        git:
          dest: ~/.tmux
          repo: "https://github.com/rogeriorocha/.tmux.git"
          accept_hostkey: yes
          update: no
        when: ansible_os_family == "Debian"
      - name: Create symbolic link  tmux.conf
        file:
          src: "/home/{{ ansible_user_id }}/.tmux/.tmux.conf"
          dest: "/home/{{ ansible_user_id }}/.tmux.conf"
          state: link
        when: ansible_os_family == "Debian"  

    - block:
      # - name: Verify if Oh-My-zsh is installed
      #   command: test -d /home/{{ ansible_user_id }}/.oh-my-zsh
      #   register: ohmyzsh
      #   ignore_errors: true
      - name: Installing Rust Cargo
        shell:
          cmd: 'curl https://sh.rustup.rs -sSf | RUSTUP_INIT_SKIP_PATH_CHECK=yes sh -s -- -y'
          warn: false
        #when: ohmyzsh.rc != 0

      - name: cargo install apps
        shell: |
          . $HOME/.cargo/env && \
            cargo install bat exa grex procs rmesg tokei ytop

      # alias ~/.zshrc
      - name: add alias cargo to ~/.zshrc
        lineinfile:
          path: ~/.zshrc
          line: "{{ item }}"
        loop:  
          - alias ls="exa -lha --icons"
          - alias bat="bat --style=auto"
          - alias less="bat --style=auto"
          - alias ccat="pygmentize -g -P style=monokai"
        when: ansible_os_family == "Debian"
      # alias ~/.bashrc
      - name: add alias cargo to ~/.bashr
        lineinfile:
          path: ~/.bashrc
          line: "{{ item }}"
        loop:  
          - alias ls="exa -lha --icons"
          - alias bat="bat --style=auto"
          - alias less="bat --style=auto"
          - alias ccat="pygmentize -g -P style=monokai"
        when: ansible_os_family == "Debian"

    ### Brave Browser
    - block: 
      - name: Install Brave Key
        become: true
        apt_key:
          url: 'https://brave-browser-apt-release.s3.brave.com/brave-core.asc'
          state: present
      - name: Install Brave Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main'
          state: present
          filename: brave
      - name: Install Brave Browser
        become: true
        apt:
          name: brave-browser            
            
    ### vscode            
    - block:
      - name: Install Microsoft Key
        become: true
        apt_key:
          url: 'https://packages.microsoft.com/keys/microsoft.asc'
          state: present
      - name: Install VSCode Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
          state: present
          filename: vscode
      - name: Install Visual Studio Code
        become: true
        apt:
          name: code
      - name: Install Virtual Studio Code Extensions
        shell:
          cmd: code --install-extension '{{ item }}' 
        loop: 
          - ms-python.python
          - ms-azuretools.vscode-docker
          - bbenoist.vagrant
          - hashicorp.terraform
          - gruntfuggly.todo-tree
          - njpwerner.autodocstring
          - eamodio.gitlens

    ### docker
    - block: 
      - name: Install Docker Key
        become: true
        apt_key:
          url: 'https://download.docker.com/linux/ubuntu/gpg'
          state: present
      - name: Install Docker Repository
        become: true
        apt_repository:
          repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
          state: present
          filename: docker-ce
      - name: Install Docker
        become: true
        apt:
          name: docker-ce
      - name: Adding existing user to group Docker
        become: yes
        user: 
          name: '{{ ansible_user_id }}'
          groups: docker 
          append: yes
      - name: Install Docker-Compose
        become: true
        get_url:
          url: 'https://github.com/docker/compose/releases/download/1.26.2/docker-compose-Linux-x86_64'
          dest: '/usr/local/bin/docker-compose'
          mode: 755
      - name: Install Docker Machine Bash Completion
        become: true
        get_url:
          url: 'https://raw.githubusercontent.com/docker/machine/v0.16.0/contrib/completion/bash/docker-machine.bash'
          dest: '/etc/bash_completion.d/docker-machine'
      - name: Install Docker-Compose Bash Completion
        become: true
        get_url:
          url: 'https://raw.githubusercontent.com/docker/compose/1.26.2/contrib/completion/bash/docker-compose'
          dest: '/etc/bash_completion.d/docker-compose'
      - name: Install Docker-Compose and Docker Machine Zsh Completion
        lineinfile:
          path: /home/{{ ansible_user_id }}/.zshrc
          regexp: '^plugins='
          line: 'plugins=(git docker docker-compose)'
### awscli          
    - block:
      - name: Installing AWS CLI via pip3
        become: true
        pip:
          name: awscli
          executable: pip3
          
### vagrant
    - block:
      - name: Installing Vagrant 2.2.18
        become: true
        unarchive:
          src: 'https://releases.hashicorp.com/vagrant/2.2.18/vagrant_2.2.18_linux_amd64.zip'
          dest: /usr/local/bin
          remote_src: yes
### Ulauncher - Application Launcher like macOS
    - block:
      - name: Adding Ulauncher Repository
        become: true
        apt_repository:
          repo: 'ppa:agornostal/ulauncher'
      - name: Install Ulauncher
        become: true
        apt:
          name: ulauncher
          


###  - PEEK - Lightweight Screen Recorder that can export as GIF
###  - OBS-STUDIO - Screen Recorder and Casting Software 

    # - block:
    #   - name: Adding Peek Repository
    #     become: true
    #     apt_repository:
    #       repo: 'ppa:peek-developers/stable'
    #   - name: Install Peek
    #     become: true
    #     apt:
    #       name: peek

    # - block:
    #   - name: Install obsproject Ubuntu Repo
    #     become: true
    #     apt_repository:
    #       repo: 'ppa:obsproject/obs-studio'
    #   - name: Install obs Studio
    #     become: true
    #     apt:
    #       name: obs-studio

###  - Install AZ CLI

    - block:
      - name: Installing AZ CLI
        shell:
          cmd: 'curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
          warn: false

      # - name: Installing Linux Apps
      #   become: true
      #   apt:
      #     name: '{{ item }}'
      #     install_recommends: yes
      #     state: present
      #   loop:    
      #     - ca-certificates 
      #     - curl 
      #     - apt-transport-https 
      #     - lsb-release 
      #     - gnupg

      # - name: Creates directory
      #   ansible.builtin.file:
      #     path: /etc/apt/keyrings
      #     state: directory
      #     recurse: true

      # - name: Install Microsoft Key
      #   become: true
      #   apt_key:
      #     url: 'https://packages.microsoft.com/keys/microsoft.asc'
      #     state: present

      # - name: Add the Azure CLI software repository
      #   bash: |
      #     AZ_DIST=$(lsb_release -cs)
      #     echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_DIST main" |
      #         sudo tee /etc/apt/sources.list.d/azure-cli.list

      # - name: Install azure-cli
      #   become: true
      #   apt:
      #     name: azure-cli
